name: Production Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run production checks
      run: |
        python manage.py check --settings=directiva_agricola.settings_production
        python manage.py test --settings=directiva_agricola.settings_production --verbosity=2
        
    - name: Deploy to Production EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.PROD_EC2_SSH_KEY }}
        script: |
          # Configurar variables de entorno para producci√≥n
          export RDS_HOSTNAME="${{ secrets.PROD_RDS_HOSTNAME }}"
          export RDS_DB_NAME="${{ secrets.PROD_RDS_DB_NAME }}"
          export RDS_ADMIN_DB_NAME="${{ secrets.PROD_RDS_ADMIN_DB_NAME }}"
          export RDS_USERNAME="${{ secrets.PROD_RDS_USERNAME }}"
          export RDS_PASSWORD="${{ secrets.PROD_RDS_PASSWORD }}"
          export RDS_PORT="${{ secrets.PROD_RDS_PORT }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export DEPLOY_TAG="${{ github.ref_name }}"
          
          # Crear backup completo antes del despliegue
          sudo mkdir -p /opt/backups/production
          sudo tar -czf /opt/backups/production/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /opt directiva-agricola
          
          # Ejecutar script de despliegue
          cd /tmp
          curl -o deploy_script.sh https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/deploy_script.sh
          chmod +x deploy_script.sh
          ./deploy_script.sh
          
          # Verificar que la aplicaci√≥n responde
          sleep 10
          if curl -f -s http://localhost:8000 > /dev/null; then
            echo "‚úÖ Aplicaci√≥n desplegada correctamente"
          else
            echo "‚ùå ERROR: La aplicaci√≥n no responde despu√©s del despliegue"
            exit 1
          fi
          
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Despliegue a producci√≥n completado exitosamente"
        echo "Tag: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Autor: ${{ github.actor }}"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Despliegue a producci√≥n fall√≥"
        echo "Tag: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Autor: ${{ github.actor }}"
