name: Backup Database

on:
  schedule:
    # Ejecutar backup diario a las 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Type of backup'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - database-only
        - code-only

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2-binary boto3
        
    - name: Create database backup
      if: github.event.inputs.backup_type == 'full' || github.event.inputs.backup_type == 'database-only'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Configurar variables
          BACKUP_DIR="/opt/backups/database"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Crear directorio de backup si no existe
          sudo mkdir -p $BACKUP_DIR
          
          # Función para logging
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/directiva-agricola/backup.log
          }
          
          log "Iniciando backup de base de datos"
          
          # Backup de base de datos principal
          PGPASSWORD='${{ secrets.RDS_PASSWORD }}' pg_dump -h ${{ secrets.RDS_HOSTNAME }} -U ${{ secrets.RDS_USERNAME }} -d ${{ secrets.RDS_DB_NAME }} > $BACKUP_DIR/directiva_agricola_$TIMESTAMP.sql
          if [ $? -eq 0 ]; then
            log "✅ Backup de base de datos principal creado: directiva_agricola_$TIMESTAMP.sql"
          else
            log "❌ ERROR: Falló el backup de la base de datos principal"
            exit 1
          fi
          
          # Backup de base de datos de administración
          PGPASSWORD='${{ secrets.RDS_PASSWORD }}' pg_dump -h ${{ secrets.RDS_HOSTNAME }} -U ${{ secrets.RDS_USERNAME }} -d ${{ secrets.RDS_ADMIN_DB_NAME }} > $BACKUP_DIR/directiva_administracion_$TIMESTAMP.sql
          if [ $? -eq 0 ]; then
            log "✅ Backup de base de datos de administración creado: directiva_administracion_$TIMESTAMP.sql"
          else
            log "❌ ERROR: Falló el backup de la base de datos de administración"
            exit 1
          fi
          
          # Comprimir backups
          cd $BACKUP_DIR
          tar -czf database_backup_$TIMESTAMP.tar.gz directiva_agricola_$TIMESTAMP.sql directiva_administracion_$TIMESTAMP.sql
          rm directiva_agricola_$TIMESTAMP.sql directiva_administracion_$TIMESTAMP.sql
          
          log "✅ Backup comprimido creado: database_backup_$TIMESTAMP.tar.gz"
          
          # Limpiar backups antiguos (mantener solo los últimos 7 días)
          find $BACKUP_DIR -name "database_backup_*.tar.gz" -mtime +7 -delete
          
          log "Backup de base de datos completado exitosamente"
          
    - name: Create code backup
      if: github.event.inputs.backup_type == 'full' || github.event.inputs.backup_type == 'code-only'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Configurar variables
          BACKUP_DIR="/opt/backups/code"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Crear directorio de backup si no existe
          sudo mkdir -p $BACKUP_DIR
          
          # Función para logging
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/directiva-agricola/backup.log
          }
          
          log "Iniciando backup de código"
          
          # Crear backup del código
          sudo tar -czf $BACKUP_DIR/code_backup_$TIMESTAMP.tar.gz -C /opt directiva-agricola
          
          if [ $? -eq 0 ]; then
            log "✅ Backup de código creado: code_backup_$TIMESTAMP.tar.gz"
          else
            log "❌ ERROR: Falló el backup del código"
            exit 1
          fi
          
          # Limpiar backups antiguos (mantener solo los últimos 7 días)
          find $BACKUP_DIR -name "code_backup_*.tar.gz" -mtime +7 -delete
          
          log "Backup de código completado exitosamente"
          
    - name: Upload backup to S3 (optional)
      if: github.event.inputs.backup_type == 'full'
      run: |
        echo "Uploading backup to S3..."
        # Aquí podrías agregar código para subir los backups a S3
        # usando las credenciales de AWS configuradas en secrets
        
    - name: Send backup notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Backup completado exitosamente"
          echo "Tipo: ${{ github.event.inputs.backup_type || 'full' }}"
          echo "Tiempo: $(date)"
        else
          echo "❌ Backup falló"
          echo "Tipo: ${{ github.event.inputs.backup_type || 'full' }}"
          echo "Tiempo: $(date)"
        fi
