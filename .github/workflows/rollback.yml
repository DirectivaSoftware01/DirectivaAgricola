name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      rollback_type:
        description: 'Type of rollback'
        required: true
        default: 'last'
        type: choice
        options:
        - last
        - specific
        - emergency
      backup_name:
        description: 'Specific backup name (for specific rollback)'
        required: false
        type: string
      confirm_rollback:
        description: 'Confirm rollback (type YES to confirm)'
        required: true
        default: 'NO'
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_rollback == 'YES'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psutil
        
    - name: List available backups
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "=== Backups de Código Disponibles ==="
          ls -la /opt/backups/directiva-agricola/ || echo "No hay backups de código"
          
          echo ""
          echo "=== Backups de Base de Datos Disponibles ==="
          ls -la /opt/backups/database/ || echo "No hay backups de base de datos"
          
          echo ""
          echo "=== Backups de Código Comprimidos ==="
          ls -la /opt/backups/code/ || echo "No hay backups de código comprimidos"
          
    - name: Perform rollback
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Función para logging
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/directiva-agricola/rollback.log
          }
          
          log "Iniciando proceso de rollback"
          log "Tipo de rollback: ${{ github.event.inputs.rollback_type }}"
          
          # Detener servicios
          log "Deteniendo servicios..."
          sudo systemctl stop directiva
          
          # Crear backup del estado actual antes del rollback
          log "Creando backup del estado actual..."
          sudo mkdir -p /opt/backups/rollback
          sudo tar -czf /opt/backups/rollback/pre-rollback-$(date +%Y%m%d_%H%M%S).tar.gz -C /opt directiva-agricola
          
          # Determinar qué backup usar
          if [ "${{ github.event.inputs.rollback_type }}" == "last" ]; then
            # Usar el backup más reciente
            BACKUP_NAME=$(ls -t /opt/backups/directiva-agricola/ | head -1)
            log "Usando backup más reciente: $BACKUP_NAME"
          elif [ "${{ github.event.inputs.rollback_type }}" == "specific" ]; then
            # Usar backup específico
            BACKUP_NAME="${{ github.event.inputs.backup_name }}"
            log "Usando backup específico: $BACKUP_NAME"
          elif [ "${{ github.event.inputs.rollback_type }}" == "emergency" ]; then
            # Usar backup de emergencia (más reciente disponible)
            BACKUP_NAME=$(ls -t /opt/backups/directiva-agricola/ | head -1)
            log "Usando backup de emergencia: $BACKUP_NAME"
          fi
          
          # Verificar que el backup existe
          if [ ! -d "/opt/backups/directiva-agricola/$BACKUP_NAME" ]; then
            log "❌ ERROR: Backup no encontrado: $BACKUP_NAME"
            exit 1
          fi
          
          # Realizar rollback
          log "Realizando rollback desde: $BACKUP_NAME"
          
          # Eliminar código actual
          sudo rm -rf /opt/directiva-agricola
          
          # Restaurar desde backup
          sudo cp -r /opt/backups/directiva-agricola/$BACKUP_NAME /opt/directiva-agricola
          sudo chown -R directiva:directiva /opt/directiva-agricola
          
          log "✅ Código restaurado desde backup"
          
          # Verificar que el código se restauró correctamente
          if [ ! -f "/opt/directiva-agricola/manage.py" ]; then
            log "❌ ERROR: El código no se restauró correctamente"
            exit 1
          fi
          
          # Instalar dependencias
          log "Instalando dependencias..."
          cd /opt/directiva-agricola
          sudo pip3 install -r requirements.txt
          
          # Ejecutar migraciones si es necesario
          log "Verificando migraciones..."
          sudo -u directiva RDS_HOSTNAME=${{ secrets.RDS_HOSTNAME }} \
            RDS_DB_NAME=${{ secrets.RDS_DB_NAME }} \
            RDS_ADMIN_DB_NAME=${{ secrets.RDS_ADMIN_DB_NAME }} \
            RDS_USERNAME=${{ secrets.RDS_USERNAME }} \
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} \
            RDS_PORT=${{ secrets.RDS_PORT }} \
            python3 manage.py migrate --settings=directiva_agricola.settings_simple
          
          # Recopilar archivos estáticos
          log "Recopilando archivos estáticos..."
          sudo -u directiva python3 manage.py collectstatic --noinput --settings=directiva_agricola.settings_simple
          
          # Reiniciar servicios
          log "Reiniciando servicios..."
          sudo systemctl start directiva
          sudo systemctl reload nginx
          
          # Verificar que los servicios están funcionando
          sleep 5
          
          if sudo systemctl is-active --quiet directiva; then
            log "✅ Servicio directiva está activo"
          else
            log "❌ ERROR: Servicio directiva no está activo"
            sudo systemctl status directiva
            exit 1
          fi
          
          if sudo systemctl is-active --quiet nginx; then
            log "✅ Servicio nginx está activo"
          else
            log "❌ ERROR: Servicio nginx no está activo"
            sudo systemctl status nginx
            exit 1
          fi
          
          # Verificar que la aplicación responde
          if curl -f -s http://localhost:8000 > /dev/null; then
            log "✅ Aplicación responde correctamente después del rollback"
          else
            log "❌ ERROR: La aplicación no responde después del rollback"
            exit 1
          fi
          
          log "Rollback completado exitosamente"
          
    - name: Verify rollback
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "=== Verificación Post-Rollback ==="
          
          # Verificar estado de los servicios
          echo "Estado de servicios:"
          sudo systemctl status directiva --no-pager
          sudo systemctl status nginx --no-pager
          
          # Verificar que la aplicación responde
          echo ""
          echo "Verificando respuesta de la aplicación..."
          if curl -f -s http://localhost:8000 > /dev/null; then
            echo "✅ Aplicación responde correctamente"
          else
            echo "❌ ERROR: La aplicación no responde"
          fi
          
          # Verificar logs recientes
          echo ""
          echo "Logs recientes de la aplicación:"
          sudo journalctl -u directiva.service --since "5 minutes ago" --no-pager
          
    - name: Send rollback notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Rollback completado exitosamente"
          echo "Tipo: ${{ github.event.inputs.rollback_type }}"
          echo "Backup: ${{ github.event.inputs.backup_name || 'último disponible' }}"
          echo "Tiempo: $(date)"
        else
          echo "❌ Rollback falló"
          echo "Tipo: ${{ github.event.inputs.rollback_type }}"
          echo "Backup: ${{ github.event.inputs.backup_name || 'último disponible' }}"
          echo "Tiempo: $(date)"
        fi
