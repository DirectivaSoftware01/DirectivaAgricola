name: Cleanup and Maintenance

on:
  schedule:
    # Ejecutar limpieza semanalmente los domingos a las 3:00 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - logs-only
        - backups-only
        - temp-files-only

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psutil
        
    - name: Cleanup server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Función para logging
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/directiva-agricola/cleanup.log
          }
          
          log "Iniciando proceso de limpieza y mantenimiento"
          
          # Limpiar logs antiguos
          if [ "${{ github.event.inputs.cleanup_type }}" == "full" ] || [ "${{ github.event.inputs.cleanup_type }}" == "logs-only" ]; then
            log "Limpiando logs antiguos..."
            
            # Limpiar logs del sistema (mantener solo los últimos 7 días)
            sudo journalctl --vacuum-time=7d
            
            # Limpiar logs de la aplicación (mantener solo los últimos 30 días)
            find /var/log/directiva-agricola -name "*.log" -mtime +30 -delete 2>/dev/null || true
            
            # Limpiar logs de nginx (mantener solo los últimos 7 días)
            sudo find /var/log/nginx -name "*.log" -mtime +7 -delete 2>/dev/null || true
            
            log "✅ Logs antiguos limpiados"
          fi
          
          # Limpiar backups antiguos
          if [ "${{ github.event.inputs.cleanup_type }}" == "full" ] || [ "${{ github.event.inputs.cleanup_type }}" == "backups-only" ]; then
            log "Limpiando backups antiguos..."
            
            # Limpiar backups de código (mantener solo los últimos 14 días)
            find /opt/backups/directiva-agricola -name "backup-*" -mtime +14 -delete 2>/dev/null || true
            
            # Limpiar backups de base de datos (mantener solo los últimos 30 días)
            find /opt/backups/database -name "database_backup_*.tar.gz" -mtime +30 -delete 2>/dev/null || true
            
            # Limpiar backups de código (mantener solo los últimos 30 días)
            find /opt/backups/code -name "code_backup_*.tar.gz" -mtime +30 -delete 2>/dev/null || true
            
            log "✅ Backups antiguos limpiados"
          fi
          
          # Limpiar archivos temporales
          if [ "${{ github.event.inputs.cleanup_type }}" == "full" ] || [ "${{ github.event.inputs.cleanup_type }}" == "temp-files-only" ]; then
            log "Limpiando archivos temporales..."
            
            # Limpiar archivos temporales del sistema
            sudo find /tmp -type f -mtime +7 -delete 2>/dev/null || true
            sudo find /var/tmp -type f -mtime +7 -delete 2>/dev/null || true
            
            # Limpiar archivos temporales de la aplicación
            find /opt/directiva-agricola -name "*.pyc" -delete 2>/dev/null || true
            find /opt/directiva-agricola -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
            find /opt/directiva-agricola -name "*.log" -mtime +7 -delete 2>/dev/null || true
            
            # Limpiar archivos de caché de Python
            find /opt/directiva-agricola -name "*.pyo" -delete 2>/dev/null || true
            find /opt/directiva-agricola -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
            
            log "✅ Archivos temporales limpiados"
          fi
          
          # Verificar espacio en disco
          log "Verificando espacio en disco..."
          DISK_USAGE=$(df /opt | tail -1 | awk '{print $5}' | sed 's/%//')
          log "Uso de disco: ${DISK_USAGE}%"
          
          if [ $DISK_USAGE -gt 80 ]; then
            log "⚠️  ADVERTENCIA: Uso de disco alto (${DISK_USAGE}%)"
            
            # Limpiar archivos adicionales si el disco está muy lleno
            if [ $DISK_USAGE -gt 90 ]; then
              log "Limpiando archivos adicionales debido a bajo espacio en disco..."
              
              # Limpiar logs más agresivamente
              sudo find /var/log -name "*.log" -mtime +3 -delete 2>/dev/null || true
              
              # Limpiar archivos de caché del sistema
              sudo yum clean all 2>/dev/null || true
              
              # Limpiar archivos temporales más agresivamente
              sudo find /tmp -type f -mtime +1 -delete 2>/dev/null || true
              
              log "Limpieza adicional completada"
            fi
          else
            log "✅ Uso de disco aceptable"
          fi
          
          # Verificar memoria
          log "Verificando uso de memoria..."
          MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
          log "Uso de memoria: ${MEMORY_USAGE}%"
          
          if [ $MEMORY_USAGE -gt 80 ]; then
            log "⚠️  ADVERTENCIA: Uso de memoria alto (${MEMORY_USAGE}%)"
          else
            log "✅ Uso de memoria aceptable"
          fi
          
          # Verificar estado de los servicios
          log "Verificando estado de los servicios..."
          
          if sudo systemctl is-active --quiet directiva; then
            log "✅ Servicio directiva está activo"
          else
            log "❌ ERROR: Servicio directiva no está activo"
            sudo systemctl start directiva
          fi
          
          if sudo systemctl is-active --quiet nginx; then
            log "✅ Servicio nginx está activo"
          else
            log "❌ ERROR: Servicio nginx no está activo"
            sudo systemctl start nginx
          fi
          
          # Verificar que la aplicación responde
          if curl -f -s http://localhost:8000 > /dev/null; then
            log "✅ Aplicación responde correctamente"
          else
            log "❌ ERROR: La aplicación no responde"
          fi
          
          # Generar reporte de limpieza
          log "Generando reporte de limpieza..."
          cat > /var/log/directiva-agricola/cleanup-report-$(date +%Y%m%d).txt << EOF
          Reporte de Limpieza - $(date)
          =================================
          
          Tipo de limpieza: ${{ github.event.inputs.cleanup_type || 'full' }}
          
          Espacio en disco: ${DISK_USAGE}%
          Uso de memoria: ${MEMORY_USAGE}%
          
          Servicios:
          - Directiva: $(sudo systemctl is-active directiva)
          - Nginx: $(sudo systemctl is-active nginx)
          
          Aplicación:
          - Responde: $(curl -f -s http://localhost:8000 > /dev/null && echo "Sí" || echo "No")
          
          Archivos limpiados:
          - Logs antiguos: $(find /var/log/directiva-agricola -name "*.log" -mtime +30 | wc -l) archivos
          - Backups antiguos: $(find /opt/backups -name "*" -mtime +30 | wc -l) archivos
          - Archivos temporales: $(find /tmp -type f -mtime +7 | wc -l) archivos
          
          EOF
          
          log "Limpieza y mantenimiento completado exitosamente"
          
    - name: Send cleanup notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Limpieza y mantenimiento completado exitosamente"
          echo "Tipo: ${{ github.event.inputs.cleanup_type || 'full' }}"
          echo "Tiempo: $(date)"
        else
          echo "❌ Limpieza y mantenimiento falló"
          echo "Tipo: ${{ github.event.inputs.cleanup_type || 'full' }}"
          echo "Tiempo: $(date)"
        fi
