name: Monitor Application Health

on:
  schedule:
    # Ejecutar cada 5 minutos
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - database
        - services

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests psycopg2-binary
        
    - name: Check application health
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Función para logging
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/directiva-agricola/health-check.log
          }
          
          log "Iniciando verificación de salud de la aplicación"
          
          # Verificar estado de los servicios
          if sudo systemctl is-active --quiet directiva; then
            log "✅ Servicio directiva está activo"
          else
            log "❌ ERROR: Servicio directiva no está activo"
            sudo systemctl status directiva
            exit 1
          fi
          
          if sudo systemctl is-active --quiet nginx; then
            log "✅ Servicio nginx está activo"
          else
            log "❌ ERROR: Servicio nginx no está activo"
            sudo systemctl status nginx
            exit 1
          fi
          
          # Verificar que la aplicación responde
          if curl -f -s http://localhost:8000 > /dev/null; then
            log "✅ Aplicación responde correctamente"
          else
            log "❌ ERROR: La aplicación no responde"
            exit 1
          fi
          
          # Verificar conectividad a la base de datos
          if PGPASSWORD='${{ secrets.RDS_PASSWORD }}' psql -h ${{ secrets.RDS_HOSTNAME }} -U ${{ secrets.RDS_USERNAME }} -d ${{ secrets.RDS_DB_NAME }} -c "SELECT 1;" > /dev/null 2>&1; then
            log "✅ Base de datos principal accesible"
          else
            log "❌ ERROR: No se puede conectar a la base de datos principal"
            exit 1
          fi
          
          if PGPASSWORD='${{ secrets.RDS_PASSWORD }}' psql -h ${{ secrets.RDS_HOSTNAME }} -U ${{ secrets.RDS_USERNAME }} -d ${{ secrets.RDS_ADMIN_DB_NAME }} -c "SELECT 1;" > /dev/null 2>&1; then
            log "✅ Base de datos de administración accesible"
          else
            log "❌ ERROR: No se puede conectar a la base de datos de administración"
            exit 1
          fi
          
          # Verificar espacio en disco
          DISK_USAGE=$(df /opt | tail -1 | awk '{print $5}' | sed 's/%//')
          if [ $DISK_USAGE -lt 80 ]; then
            log "✅ Espacio en disco OK: ${DISK_USAGE}% usado"
          else
            log "⚠️  ADVERTENCIA: Espacio en disco alto: ${DISK_USAGE}% usado"
          fi
          
          # Verificar memoria
          MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
          if [ $MEMORY_USAGE -lt 80 ]; then
            log "✅ Memoria OK: ${MEMORY_USAGE}% usada"
          else
            log "⚠️  ADVERTENCIA: Uso de memoria alto: ${MEMORY_USAGE}% usada"
          fi
          
          # Verificar logs de errores recientes
          ERROR_COUNT=$(sudo journalctl -u directiva.service --since "5 minutes ago" | grep -i error | wc -l)
          if [ $ERROR_COUNT -eq 0 ]; then
            log "✅ No hay errores recientes en los logs"
          else
            log "⚠️  ADVERTENCIA: $ERROR_COUNT errores encontrados en los últimos 5 minutos"
          fi
          
          log "Verificación de salud completada exitosamente"
          
    - name: Send notification on failure
      if: failure()
      run: |
        echo "❌ La verificación de salud falló"
        echo "Tiempo: $(date)"
        echo "Commit: ${{ github.sha }}"
        # Aquí podrías agregar notificaciones por email, Slack, etc.
        
    - name: Send notification on success
      if: success()
      run: |
        echo "✅ La verificación de salud fue exitosa"
        echo "Tiempo: $(date)"
        echo "Commit: ${{ github.sha }}"
