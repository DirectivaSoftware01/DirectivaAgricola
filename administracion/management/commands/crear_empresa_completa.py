import os
import sqlite3
from pathlib import Path
from django.core.management.base import BaseCommand, CommandError
from django.core.management import call_command
from django.conf import settings
from django.contrib.auth.hashers import make_password
from administracion.models import Empresa


class Command(BaseCommand):
    help = 'Crea una nueva empresa con estructura completa y datos b√°sicos'

    def add_arguments(self, parser):
        parser.add_argument(
            '--razon-social',
            type=str,
            required=True,
            help='Raz√≥n social de la empresa'
        )
        parser.add_argument(
            '--rfc',
            type=str,
            required=True,
            help='RFC de la empresa'
        )
        parser.add_argument(
            '--direccion',
            type=str,
            default='',
            help='Direcci√≥n de la empresa'
        )
        parser.add_argument(
            '--telefono',
            type=str,
            default='',
            help='Tel√©fono de la empresa'
        )
        parser.add_argument(
            '--ciclo-actual',
            type=str,
            default='2025',
            help='Ciclo actual de la empresa'
        )

    def handle(self, *args, **options):
        razon_social = options['razon_social']
        rfc = options['rfc']
        direccion = options['direccion']
        telefono = options['telefono']
        ciclo_actual = options['ciclo_actual']

        # Generar nombre de base de datos
        db_name = f"Directiva_{rfc}"
        db_path = Path(settings.BASE_DIR) / f"{db_name}.sqlite3"

        self.stdout.write(f'Creando empresa: {razon_social} (RFC: {rfc})')
        self.stdout.write(f'Base de datos: {db_name}.sqlite3')

        try:
            # 1. Verificar si la empresa ya existe
            if Empresa.objects.using('administracion').filter(rfc=rfc).exists():
                raise CommandError(f'La empresa con RFC {rfc} ya existe')

            # 2. Crear la base de datos vac√≠a
            if db_path.exists():
                self.stdout.write(f'La base de datos {db_name}.sqlite3 ya existe, elimin√°ndola...')
                db_path.unlink()

            # Crear base de datos vac√≠a
            conn = sqlite3.connect(str(db_path))
            conn.close()

            # 3. Configurar Django para usar la nueva base de datos
            new_db_config = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': str(db_path),
                    'ATOMIC_REQUESTS': True,
                    'TIME_ZONE': 'America/Mexico_City',
                    'OPTIONS': {},
                    'CONN_MAX_AGE': 0,
                    'AUTOCOMMIT': True,
                    'CONN_HEALTH_CHECKS': False,
                    'HOST': '',
                    'PASSWORD': '',
                    'PORT': '',
                    'USER': '',
                    'TEST': {
                        'CHARSET': None,
                        'COLLATION': None,
                        'MIGRATE': True,
                        'MIRROR': None,
                        'NAME': None
                    },
                }
            }

            # Actualizar configuraci√≥n temporalmente
            original_databases = settings.DATABASES.copy()
            settings.DATABASES.update(new_db_config)

            # 4. Aplicar migraciones
            self.stdout.write('Aplicando migraciones...')
            call_command('migrate', '--database=default', verbosity=0)
            call_command('migrate', 'core', '--database=default', verbosity=0)

            # 5. Crear estructura y datos b√°sicos
            self._crear_estructura_basica(db_path)
            self._insertar_datos_basicos(db_path, razon_social, rfc, direccion, telefono, ciclo_actual)

            # 6. Restaurar configuraci√≥n original
            settings.DATABASES = original_databases

            # 7. Registrar empresa en base de administraci√≥n
            self._registrar_empresa(razon_social, rfc, db_name)

            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Empresa {razon_social} creada exitosamente')
            )
            self.stdout.write(f'üìÅ Base de datos: {db_name}.sqlite3')
            self.stdout.write(f'üë§ Usuario: supervisor')
            self.stdout.write(f'üîë Contrase√±a: Directivasbmj1*')

        except Exception as e:
            # Restaurar configuraci√≥n en caso de error
            settings.DATABASES = original_databases
            if db_path.exists():
                db_path.unlink()
            raise CommandError(f'Error creando empresa: {str(e)}')

    def _crear_estructura_basica(self, db_path):
        """Crear estructura b√°sica de la base de datos"""
        self.stdout.write('Creando estructura b√°sica...')
        
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        # Crear tabla django_session si no existe
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS django_session (
                session_key varchar(40) NOT NULL PRIMARY KEY,
                session_data text NOT NULL,
                expire_date datetime NOT NULL
            )
        """)

        conn.commit()
        conn.close()

    def _insertar_datos_basicos(self, db_path, razon_social, rfc, direccion, telefono, ciclo_actual):
        """Insertar datos b√°sicos en la nueva empresa"""
        self.stdout.write('Insertando datos b√°sicos...')
        
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()

        # 1. Crear usuario supervisor
        supervisor_password = make_password('Directivasbmj1*')
        cursor.execute("""
            INSERT INTO usuarios (
                password, last_login, is_superuser, username, first_name, last_name, 
                email, is_staff, is_active, date_joined
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            supervisor_password,
            None,
            1,  # is_superuser
            'supervisor',
            'SUPERVISOR',
            'SISTEMA',
            'supervisor@sistema.com',
            1,  # is_staff
            1,  # is_active
            '2025-01-01 00:00:00'
        ))

        # 2. Insertar cat√°logos b√°sicos
        self._insertar_catalogos_basicos(cursor)

        # 3. Insertar configuraci√≥n del sistema
        cursor.execute("""
            INSERT INTO configuracion_sistema (
                razon_social, rfc, direccion, telefono, ciclo_actual,
                certificado_nombre, certificado_password, certificado_ruta,
                pac_usuario, pac_password, pac_url, pac_produccion,
                fecha_creacion, fecha_modificacion
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            razon_social,
            rfc,
            direccion,
            telefono,
            ciclo_actual,
            '',  # certificado_nombre
            '',  # certificado_password
            '',  # certificado_ruta
            '',  # pac_usuario
            '',  # pac_password
            '',  # pac_url
            0,   # pac_produccion
            '2025-01-01 00:00:00',
            '2025-01-01 00:00:00'
        ))

        conn.commit()
        conn.close()

    def _insertar_catalogos_basicos(self, cursor):
        """Insertar cat√°logos b√°sicos del sistema"""
        
        # Reg√≠menes fiscales b√°sicos
        regimenes = [
            ('601', 'General de Ley Personas Morales'),
            ('603', 'Personas Morales con Fines no Lucrativos'),
            ('605', 'Sueldos y Salarios e Ingresos Asimilados a Salarios'),
            ('606', 'Arrendamiento'),
            ('608', 'Dem√°s ingresos'),
            ('610', 'Residentes en el Extranjero sin Establecimiento Permanente en M√©xico'),
            ('611', 'Ingresos por Dividendos (socios y accionistas)'),
            ('612', 'Personas F√≠sicas con Actividades Empresariales y Profesionales'),
            ('615', 'R√©gimen de los ingresos por obtenci√≥n de premios'),
            ('616', 'Sin obligaciones fiscales'),
            ('620', 'Sociedades Cooperativas de Producci√≥n que optan por diferir sus ingresos'),
            ('621', 'Incorporaci√≥n Fiscal'),
            ('622', 'Actividades Agr√≠colas, Ganaderas, Silv√≠colas y Pesqueras'),
            ('623', 'Opcional para Grupos de Sociedades'),
            ('624', 'Coordinados'),
            ('625', 'R√©gimen de las Actividades Empresariales con ingresos a trav√©s de Plataformas Tecnol√≥gicas'),
            ('626', 'R√©gimen Simplificado de Confianza'),
        ]

        for codigo, descripcion in regimenes:
            cursor.execute("""
                INSERT OR IGNORE INTO regimen_fiscal (codigo, descripcion, fisica, moral, activo, fecha_creacion)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (codigo, descripcion, 1, 1, 1, '2025-01-01 00:00:00'))

        # Usos de CFDI b√°sicos
        usos_cfdi = [
            ('G01', 'Adquisici√≥n de mercanc√≠as'),
            ('G02', 'Devoluciones, descuentos o bonificaciones'),
            ('G03', 'Gastos en general'),
            ('I01', 'Construcciones'),
            ('I02', 'Mobilario y equipo de oficina por inversiones'),
            ('I03', 'Equipo de transporte'),
            ('I04', 'Equipo de computo y accesorios'),
            ('I05', 'Dados, troqueles, moldes, matrices y herramental'),
            ('I06', 'Comunicaciones telef√≥nicas'),
            ('I07', 'Comunicaciones satelitales'),
            ('I08', 'Otra maquinaria y equipo'),
            ('D01', 'Honorarios m√©dicos, dentales y gastos hospitalarios'),
            ('D02', 'Gastos m√©dicos por incapacidad o discapacidad'),
            ('D03', 'Gastos funerales'),
            ('D04', 'Donativos'),
            ('D05', 'Intereses reales efectivamente pagados por cr√©ditos hipotecarios (casa habitaci√≥n)'),
            ('D06', 'Aportaciones voluntarias al SAR'),
            ('D07', 'Primas por seguros de gastos m√©dicos'),
            ('D08', 'Gastos de transportaci√≥n escolar obligatoria'),
            ('D09', 'Dep√≥sitos en cuentas para el ahorro, primas que tengan como base planes de pensiones'),
            ('D10', 'Pagos por servicios educativos (colegiaturas)'),
            ('P01', 'Por definir'),
        ]

        for codigo, descripcion in usos_cfdi:
            cursor.execute("""
                INSERT OR IGNORE INTO uso_cfdi (codigo, descripcion, aplica_fisica, aplica_moral, activo, fecha_creacion)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (codigo, descripcion, 1, 1, 1, '2025-01-01 00:00:00'))

        # M√©todos de pago b√°sicos
        metodos_pago = [
            ('PUE', 'Pago en una exhibici√≥n'),
            ('PPD', 'Pago en parcialidades o diferido'),
        ]

        for codigo, descripcion in metodos_pago:
            cursor.execute("""
                INSERT OR IGNORE INTO metodo_pago (codigo, descripcion, activo, fecha_creacion)
                VALUES (?, ?, ?, ?)
            """, (codigo, descripcion, 1, '2025-01-01 00:00:00'))

        # Formas de pago b√°sicas
        formas_pago = [
            ('01', 'Efectivo'),
            ('02', 'Cheque nominativo'),
            ('03', 'Transferencia electr√≥nica de fondos'),
            ('04', 'Tarjeta de cr√©dito'),
            ('05', 'Monedero electr√≥nico'),
            ('06', 'Dinero electr√≥nico'),
            ('08', 'Vales de despensa'),
            ('12', 'Daci√≥n en pago'),
            ('13', 'Pago por subrogaci√≥n'),
            ('14', 'Pago por consignaci√≥n'),
            ('15', 'Condonaci√≥n'),
            ('17', 'Compensaci√≥n'),
            ('23', 'Novaci√≥n'),
            ('24', 'Confusi√≥n'),
            ('25', 'Remisi√≥n de deuda'),
            ('26', 'Prescripci√≥n o caducidad'),
            ('27', 'A satisfacci√≥n del acreedor'),
            ('28', 'Tarjeta de d√©bito'),
            ('29', 'Tarjeta de servicios'),
            ('30', 'Aplicaci√≥n de anticipos'),
            ('31', 'Intermediario pagos'),
            ('99', 'Por definir'),
        ]

        for codigo, descripcion in formas_pago:
            cursor.execute("""
                INSERT OR IGNORE INTO forma_pago (codigo, descripcion, activo, fecha_creacion)
                VALUES (?, ?, ?, ?)
            """, (codigo, descripcion, 1, '2025-01-01 00:00:00'))

        # Impuestos b√°sicos
        impuestos = [
            ('002', 'IVA Tasa 16%', 0.16),
            ('003', 'IVA Tasa 0%', 0.00),
        ]

        for codigo, nombre, tasa in impuestos:
            cursor.execute("""
                INSERT OR IGNORE INTO tipo_impuesto (codigo, nombre, tasa, activo, fecha_creacion)
                VALUES (?, ?, ?, ?, ?)
            """, (codigo, nombre, tasa, 1, '2025-01-01 00:00:00'))

    def _registrar_empresa(self, razon_social, rfc, db_name):
        """Registrar la empresa en la base de datos de administraci√≥n"""
        self.stdout.write('Registrando empresa en administraci√≥n...')
        
        empresa = Empresa.objects.using('administracion').create(
            nombre=razon_social,
            rfc=rfc,
            db_name=db_name,
            activo=True,
            suspendido=False
        )
        
        self.stdout.write(f'‚úÖ Empresa registrada con ID: {empresa.id}')
