# Generated by Django 5.2.5 on 2025-10-14 01:24

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AutorizoGasto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre completo de la persona que autoriza gastos', max_length=200, verbose_name='Nombre completo')),
                ('activo', models.BooleanField(default=True, help_text='Indica si la persona está activa para autorizar gastos', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
            ],
            options={
                'verbose_name': 'Autorizó Gasto',
                'verbose_name_plural': 'Autorizó Gastos',
                'db_table': 'autorizo_gasto',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='RegimenFiscal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(help_text='Código del régimen fiscal según el SAT', max_length=10, unique=True, verbose_name='Código')),
                ('descripcion', models.CharField(help_text='Descripción del régimen fiscal', max_length=200, verbose_name='Descripción')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el régimen fiscal está activo', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'verbose_name': 'Régimen Fiscal',
                'verbose_name_plural': 'Regímenes Fiscales',
                'db_table': 'regimen_fiscal',
                'ordering': ['codigo'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre completo')),
                ('puesto', models.CharField(max_length=100, verbose_name='Puesto')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo electrónico')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Es administrador')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CentroCosto',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('descripcion', models.CharField(help_text='Descripción del centro de costo', max_length=200, verbose_name='Descripción')),
                ('hectareas', models.DecimalField(decimal_places=2, help_text='Número de hectáreas del centro de costo', max_digits=10, verbose_name='Hectáreas')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales sobre el centro de costo', null=True, verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el centro de costo está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='centros_costo_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='centros_costo_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Centro de Costo',
                'verbose_name_plural': 'Centros de Costos',
                'db_table': 'centros_costo',
                'ordering': ['descripcion'],
            },
        ),
        migrations.CreateModel(
            name='ClasificacionGasto',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('descripcion', models.CharField(help_text='Descripción de la clasificación de gasto', max_length=200, verbose_name='Descripción')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales sobre la clasificación de gasto', null=True, verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, help_text='Indica si la clasificación de gasto está activa en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='clasificaciones_gasto_creadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='clasificaciones_gasto_modificadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Clasificación de Gasto',
                'verbose_name_plural': 'Clasificaciones de Gastos',
                'db_table': 'clasificaciones_gasto',
                'ordering': ['descripcion'],
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('razon_social', models.CharField(help_text='Nombre completo o razón social del cliente', max_length=200, verbose_name='Razón Social')),
                ('codigo_postal', models.CharField(help_text='Código postal de 5 dígitos', max_length=5, validators=[django.core.validators.RegexValidator(message='El código postal debe tener exactamente 5 dígitos', regex='^\\d{5}$')], verbose_name='Código Postal')),
                ('rfc', models.CharField(help_text='Registro Federal de Contribuyentes (12 o 13 caracteres)', max_length=13, unique=True, validators=[core.models.validar_rfc], verbose_name='RFC')),
                ('domicilio', models.TextField(help_text='Dirección completa del cliente', verbose_name='Domicilio')),
                ('telefono', models.CharField(help_text='Número de teléfono del cliente', max_length=15, validators=[django.core.validators.RegexValidator(message='El teléfono solo puede contener números, espacios, guiones, paréntesis y el signo más', regex='^[\\d\\s\\-\\+\\(\\)]+$')], verbose_name='Teléfono')),
                ('email_principal', models.EmailField(help_text='Correo electrónico principal del cliente', max_length=254, verbose_name='Correo Electrónico Principal')),
                ('email_alterno', models.EmailField(blank=True, help_text='Correo electrónico alternativo del cliente (opcional)', max_length=254, null=True, verbose_name='Correo Electrónico Alterno')),
                ('direccion_entrega', models.TextField(blank=True, help_text='Dirección específica para entregas (opcional)', null=True, verbose_name='Dirección de Entrega')),
                ('numero_bodega', models.CharField(blank=True, help_text='Número o identificador de la bodega (opcional)', max_length=50, null=True, verbose_name='Número de Bodega')),
                ('telefono_bodega', models.CharField(blank=True, help_text='Número de teléfono de la bodega (opcional)', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='El teléfono solo puede contener números, espacios, guiones, paréntesis y el signo más', regex='^[\\d\\s\\-\\+\\(\\)]+$')], verbose_name='Teléfono de Bodega')),
                ('ciudad', models.CharField(blank=True, help_text='Ciudad del cliente (opcional)', max_length=100, null=True, verbose_name='Ciudad')),
                ('estado', models.CharField(blank=True, help_text='Estado del cliente (opcional)', max_length=100, null=True, verbose_name='Estado')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el cliente está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='clientes_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='clientes_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
                ('regimen_fiscal', models.ForeignKey(help_text='Régimen fiscal del cliente según el SAT', on_delete=django.db.models.deletion.PROTECT, to='core.regimenfiscal', verbose_name='Régimen Fiscal')),
            ],
            options={
                'verbose_name': 'Cliente',
                'verbose_name_plural': 'Clientes',
                'db_table': 'clientes',
                'ordering': ['razon_social'],
            },
        ),
        migrations.CreateModel(
            name='ConfiguracionSistema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ciclo_actual', models.CharField(blank=True, help_text='Nombre del ciclo de producción actual', max_length=100, verbose_name='Ciclo actual')),
                ('razon_social', models.CharField(blank=True, help_text='Razón social de la empresa', max_length=200, verbose_name='Razón Social')),
                ('rfc', models.CharField(blank=True, help_text='Registro Federal de Contribuyentes de la empresa', max_length=13, validators=[core.models.validar_rfc], verbose_name='RFC')),
                ('direccion', models.TextField(blank=True, help_text='Dirección de la empresa', verbose_name='Dirección')),
                ('telefono', models.CharField(blank=True, help_text='Número de teléfono de la empresa', max_length=15, validators=[django.core.validators.RegexValidator(message='El teléfono solo puede contener números, espacios, guiones, paréntesis y el signo más', regex='^[\\d\\s\\-\\+\\(\\)]+$')], verbose_name='Teléfono')),
                ('logo_empresa', models.ImageField(blank=True, help_text='Logotipo de la empresa', null=True, upload_to='logos_empresa/', verbose_name='Logo de la Empresa')),
                ('nombre_pac', models.CharField(choices=[('PRODIGIA', 'Prodigia')], default='PRODIGIA', help_text='Proveedor Autorizado de Certificación', max_length=50, verbose_name='Nombre de PAC')),
                ('contrato', models.CharField(blank=True, help_text='Número de contrato con el PAC', max_length=100, verbose_name='Contrato')),
                ('usuario_pac', models.CharField(blank=True, help_text='Usuario para el PAC', max_length=100, verbose_name='Usuario')),
                ('password_pac', models.CharField(blank=True, help_text='Contraseña para el PAC', max_length=100, verbose_name='Contraseña')),
                ('certificado', models.TextField(blank=True, help_text='Certificado en formato base64', null=True, verbose_name='Certificado')),
                ('certificado_nombre', models.CharField(blank=True, help_text='Nombre original del archivo de certificado', max_length=255, null=True, verbose_name='Nombre del certificado')),
                ('llave', models.TextField(blank=True, help_text='Llave privada en formato base64', null=True, verbose_name='Llave')),
                ('llave_nombre', models.CharField(blank=True, help_text='Nombre original del archivo de llave', max_length=255, null=True, verbose_name='Nombre de la llave')),
                ('password_llave', models.CharField(blank=True, help_text='Contraseña para la llave privada', max_length=100, verbose_name='Contraseña de la llave')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('ultima_actualizacion_catalogos', models.DateTimeField(blank=True, help_text='Fecha y hora de la última actualización de catálogos SAT', null=True, verbose_name='Última actualización de catálogos')),
                ('usuario_creacion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='configuraciones_creadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de creación')),
                ('usuario_modificacion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='configuraciones_modificadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de modificación')),
            ],
            options={
                'verbose_name': 'Configuración del Sistema',
                'verbose_name_plural': 'Configuraciones del Sistema',
                'db_table': 'configuracion_sistema',
            },
        ),
        migrations.CreateModel(
            name='CuentaBancaria',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('nombre_banco', models.CharField(help_text='Nombre completo del banco', max_length=200, verbose_name='Nombre del Banco')),
                ('numero_cuenta', models.CharField(help_text='Número de cuenta bancaria', max_length=50, verbose_name='Número de Cuenta')),
                ('nombre_corto', models.CharField(help_text='Nombre corto para identificar la cuenta (ej: BBVA Principal)', max_length=100, verbose_name='Nombre Corto')),
                ('activo', models.BooleanField(default=True, help_text='Indica si la cuenta bancaria está activa en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cuentas_bancarias_creadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cuentas_bancarias_modificadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Cuenta Bancaria',
                'verbose_name_plural': 'Cuentas Bancarias',
                'db_table': 'cuentas_bancarias',
                'ordering': ['nombre_corto'],
            },
        ),
        migrations.CreateModel(
            name='Cultivo',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('nombre', models.CharField(help_text='Nombre del cultivo', max_length=100, verbose_name='Nombre del cultivo')),
                ('variedad', models.CharField(help_text='Variedad del cultivo', max_length=100, verbose_name='Variedad')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales', verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el cultivo está activo', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cultivos_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cultivos_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de modificación')),
            ],
            options={
                'verbose_name': 'Cultivo',
                'verbose_name_plural': 'Cultivos',
                'db_table': 'cultivos',
                'ordering': ['nombre', 'variedad'],
            },
        ),
        migrations.CreateModel(
            name='Emisor',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('razon_social', models.CharField(help_text='Razón social del emisor', max_length=200, verbose_name='Razón Social')),
                ('rfc', models.CharField(help_text='Registro Federal de Contribuyentes del emisor', max_length=13, validators=[core.models.validar_rfc], verbose_name='RFC')),
                ('codigo_postal', models.CharField(help_text='Código postal de 5 dígitos', max_length=5, validators=[django.core.validators.RegexValidator(message='El código postal debe tener exactamente 5 dígitos', regex='^\\d{5}$')], verbose_name='Código Postal')),
                ('regimen_fiscal', models.CharField(choices=[('601', '601 - General de Ley Personas Morales'), ('603', '603 - Personas Morales con Fines no Lucrativos'), ('605', '605 - Sueldos y Salarios e Ingresos Asimilados a Salarios'), ('606', '606 - Arrendamiento'), ('608', '608 - Demás ingresos'), ('610', '610 - Residentes en el Extranjero sin Establecimiento Permanente en México'), ('611', '611 - Ingresos por Dividendos (socios y accionistas)'), ('612', '612 - Personas Físicas con Actividades Empresariales y Profesionales'), ('614', '614 - Ingresos por intereses'), ('615', '615 - Régimen de los ingresos por obtención de premios'), ('616', '616 - Sin obligaciones fiscales'), ('620', '620 - Sociedades Cooperativas de Producción que optan por diferir sus ingresos'), ('621', '621 - Incorporación Fiscal'), ('622', '622 - Actividades Agrícolas, Ganaderas, Silvícolas y Pesqueras'), ('623', '623 - Opcional para Grupos de Sociedades'), ('624', '624 - Coordinados'), ('625', '625 - Régimen de las Actividades Empresariales con ingresos a través de Plataformas Tecnológicas'), ('626', '626 - Régimen Simplificado de Confianza'), ('628', '628 - Hidrocarburos'), ('629', '629 - De los Regímenes Fiscales Preferentes y de las Empresas Multinacionales'), ('630', '630 - Enajenación de acciones en bolsa de valores'), ('615', '615 - Régimen de los ingresos por obtención de premios')], default='626', help_text='Régimen fiscal según el SAT', max_length=3, verbose_name='Régimen Fiscal')),
                ('serie', models.CharField(default='A', help_text='Serie para las facturas de este emisor', max_length=10, verbose_name='Serie')),
                ('archivo_certificado', models.TextField(blank=True, help_text='Archivo .cer del certificado codificado en base64', null=True, verbose_name='Archivo de Certificado (Base64)')),
                ('nombre_archivo_certificado', models.CharField(blank=True, help_text='Nombre original del archivo .cer', max_length=255, null=True, verbose_name='Nombre del Archivo de Certificado')),
                ('archivo_llave', models.TextField(blank=True, help_text='Archivo .key de la llave privada codificado en base64', null=True, verbose_name='Archivo de Llave (Base64)')),
                ('nombre_archivo_llave', models.CharField(blank=True, help_text='Nombre original del archivo .key', max_length=255, null=True, verbose_name='Nombre del Archivo de Llave')),
                ('password_llave', models.CharField(help_text='Contraseña para la llave privada', max_length=100, verbose_name='Contraseña de la Llave')),
                ('nombre_pac', models.CharField(choices=[('PRODIGIA', 'Prodigia')], default='PRODIGIA', help_text='Proveedor Autorizado de Certificación', max_length=50, verbose_name='Nombre de PAC')),
                ('contrato', models.CharField(blank=True, help_text='Número de contrato con el PAC', max_length=100, verbose_name='Contrato')),
                ('usuario_pac', models.CharField(blank=True, help_text='Usuario para el PAC', max_length=100, verbose_name='Usuario PAC')),
                ('password_pac', models.CharField(blank=True, help_text='Contraseña para el PAC', max_length=100, verbose_name='Contraseña PAC')),
                ('timbrado_prueba', models.BooleanField(default=True, help_text='Indica si el timbrado será en modo prueba o producción', verbose_name='Timbrado de Prueba')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el emisor está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='emisores_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='emisores_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Modificación')),
            ],
            options={
                'verbose_name': 'Emisor',
                'verbose_name_plural': 'Emisores',
                'db_table': 'emisores',
                'ordering': ['razon_social'],
            },
        ),
        migrations.CreateModel(
            name='Factura',
            fields=[
                ('serie', models.CharField(blank=True, help_text='Serie para control interno del contribuyente (opcional)', max_length=25, null=True, verbose_name='Serie')),
                ('folio', models.AutoField(help_text='Folio consecutivo de la factura (clave primaria)', primary_key=True, serialize=False, verbose_name='Folio')),
                ('fecha_emision', models.DateTimeField(help_text='Fecha y hora de emisión del comprobante (AAAA-MM-DDThh:mm:ss)', verbose_name='Fecha de Emisión')),
                ('lugar_expedicion', models.CharField(help_text='Código postal del lugar de expedición', max_length=5, verbose_name='Lugar de Expedición')),
                ('uso_cfdi', models.CharField(choices=[('G01', 'G01 - Adquisición de mercancías'), ('G02', 'G02 - Devoluciones, descuentos o bonificaciones'), ('G03', 'G03 - Gastos en general'), ('I01', 'I01 - Construcciones'), ('I02', 'I02 - Mobilario y equipo de oficina por inversiones'), ('I03', 'I03 - Equipo de transporte'), ('I04', 'I04 - Equipo de computo y accesorios'), ('I05', 'I05 - Dados, troqueles, moldes, matrices y herramental'), ('I06', 'I06 - Comunicaciones telefónicas'), ('I07', 'I07 - Comunicaciones satelitales'), ('I08', 'I08 - Otra maquinaria y equipo'), ('D01', 'D01 - Honorarios médicos, dentales y gastos hospitalarios'), ('D02', 'D02 - Gastos médicos por incapacidad o discapacidad'), ('D03', 'D03 - Gastos funerales'), ('D04', 'D04 - Donativos'), ('D05', 'D05 - Intereses reales efectivamente pagados por créditos hipotecarios (casa habitación)'), ('D06', 'D06 - Aportaciones voluntarias al SAR'), ('D07', 'D07 - Primas por seguros de gastos médicos'), ('D08', 'D08 - Gastos de transportación escolar obligatoria'), ('D09', 'D09 - Depósitos en cuentas para el ahorro, primas que tengan como base planes de pensiones'), ('D10', 'D10 - Pagos por servicios educativos (colegiaturas)'), ('CP01', 'CP01 - Pagos'), ('CN01', 'CN01 - Nómina'), ('S01', 'S01 - Sin efectos fiscales'), ('P01', 'P01 - Por definir'), ('DI01', 'DI01 - Honorarios médicos, dentales y gastos hospitalarios'), ('DI02', 'DI02 - Gastos médicos por incapacidad o discapacidad'), ('DI03', 'DI03 - Gastos funerales'), ('DI04', 'DI04 - Donativos'), ('DI05', 'DI05 - Intereses reales efectivamente pagados por créditos hipotecarios (casa habitación)'), ('DI06', 'DI06 - Aportaciones voluntarias al SAR'), ('DI07', 'DI07 - Primas por seguros de gastos médicos'), ('DI08', 'DI08 - Gastos de transportación escolar obligatoria'), ('DI09', 'DI09 - Depósitos en cuentas para el ahorro, primas que tengan como base planes de pensiones'), ('DI10', 'DI10 - Pagos por servicios educativos (colegiaturas)'), ('DCP01', 'DCP01 - Pagos'), ('DCN01', 'DCN01 - Nómina'), ('DS01', 'DS01 - Sin efectos fiscales'), ('DP01', 'DP01 - Por definir')], help_text='Uso del comprobante fiscal', max_length=5, verbose_name='Uso CFDI')),
                ('exportacion', models.CharField(choices=[('01', '01 - No aplica'), ('02', '02 - Definitiva'), ('03', '03 - Temporal')], default='01', help_text='Tipo de exportación (requerido)', max_length=2, verbose_name='Exportacion')),
                ('tipo_comprobante', models.CharField(choices=[('I', 'I - Ingreso'), ('E', 'E - Egreso'), ('T', 'T - Traslado'), ('N', 'N - Nómina'), ('P', 'P - Pago')], default='I', help_text='Tipo de comprobante (requerido)', max_length=1, verbose_name='TipoDeComprobante')),
                ('confirmacion', models.CharField(blank=True, help_text='Confirmación del comprobante (opcional)', max_length=2, null=True, verbose_name='Confirmacion')),
                ('metodo_pago', models.CharField(choices=[('PUE', 'PUE - Pago en una sola exhibición'), ('PPD', 'PPD - Pago en parcialidades o diferido')], default='PUE', help_text='Método de pago', max_length=3, verbose_name='Método de Pago')),
                ('moneda', models.CharField(default='MXN', help_text='Moneda de la factura', max_length=3, verbose_name='Moneda')),
                ('forma_pago', models.CharField(choices=[('01', '01 - Efectivo'), ('02', '02 - Cheque nominativo'), ('03', '03 - Transferencia electrónica de fondos'), ('04', '04 - Tarjeta de crédito'), ('05', '05 - Monedero electrónico'), ('06', '06 - Dinero electrónico'), ('08', '08 - Vales de despensa'), ('12', '12 - Dación en pago'), ('13', '13 - Pago por subrogación'), ('14', '14 - Pago por consignación'), ('15', '15 - Condonación'), ('17', '17 - Compensación'), ('23', '23 - Novación'), ('24', '24 - Confusión'), ('25', '25 - Remisión de deuda'), ('26', '26 - Prescripción o caducidad'), ('27', '27 - A satisfacción del acreedor'), ('28', '28 - Tarjeta de débito'), ('29', '29 - Tarjeta de servicios'), ('30', '30 - Aplicación de anticipos'), ('31', '31 - Intermediario pagos'), ('99', '99 - Por definir')], default='99', help_text='Forma de pago', max_length=2, verbose_name='Forma de Pago')),
                ('tipo_cambio', models.DecimalField(decimal_places=4, default=1.0, help_text='Tipo de cambio', max_digits=10, verbose_name='Tipo de Cambio')),
                ('subtotal', models.DecimalField(decimal_places=4, help_text='Subtotal del comprobante (requerido)', max_digits=15, verbose_name='SubTotal')),
                ('descuento', models.DecimalField(blank=True, decimal_places=4, default=0.0, help_text='Descuento aplicado al comprobante (opcional)', max_digits=15, null=True, verbose_name='Descuento')),
                ('total', models.DecimalField(decimal_places=4, help_text='Total del comprobante (requerido)', max_digits=15, verbose_name='Total')),
                ('impuesto', models.DecimalField(decimal_places=4, default=0.0, help_text='Total de impuestos trasladados', max_digits=15, verbose_name='Impuesto')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Modificación')),
                ('cancelada', models.BooleanField(default=False, help_text='Indica si la factura está cancelada', verbose_name='Cancelada')),
                ('uuid', models.CharField(blank=True, help_text='UUID del comprobante fiscal timbrado', max_length=36, null=True, verbose_name='UUID')),
                ('fecha_timbrado', models.DateTimeField(blank=True, help_text='Fecha y hora del timbrado', null=True, verbose_name='Fecha de Timbrado')),
                ('no_cert_sat', models.CharField(blank=True, help_text='Número de serie del certificado SAT (20 posiciones)', max_length=20, null=True, verbose_name='NoCertificadoSAT')),
                ('sello_sat', models.TextField(blank=True, help_text='Sello digital del SAT en Base64', null=True, verbose_name='SelloSAT')),
                ('codigo_qr', models.TextField(blank=True, help_text='Código QR de la factura en Base64 (proporcionado por el PAC)', null=True, verbose_name='Código QR')),
                ('cadena_original_sat', models.TextField(blank=True, help_text='Cadena original del complemento SAT (SelloCFD del timbre fiscal)', null=True, verbose_name='Cadena Original complemento SAT')),
                ('sello', models.TextField(blank=True, help_text='Sello digital del comprobante en Base64', null=True, verbose_name='Sello')),
                ('no_certificado', models.CharField(blank=True, help_text='Número de serie del certificado del emisor', max_length=20, null=True, verbose_name='NoCertificado')),
                ('certificado', models.TextField(blank=True, help_text='Certificado del emisor en Base64', null=True, verbose_name='Certificado')),
                ('estado_timbrado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('TIMBRADO', 'Timbrado'), ('CANCELADO', 'Cancelado'), ('ERROR', 'Error')], default='PENDIENTE', help_text='Estado del timbrado', max_length=20, verbose_name='Estado de Timbrado')),
                ('periodicidad', models.CharField(blank=True, choices=[('01', '01 - Mensual'), ('02', '02 - Bimestral'), ('03', '03 - Trimestral'), ('04', '04 - Cuatrimestral'), ('05', '05 - Semestral'), ('06', '06 - Anual')], help_text='Periodicidad de la información global', max_length=2, null=True, verbose_name='Periodicidad')),
                ('meses', models.CharField(blank=True, choices=[('01', '01 - Enero'), ('02', '02 - Febrero'), ('03', '03 - Marzo'), ('04', '04 - Abril'), ('05', '05 - Mayo'), ('06', '06 - Junio'), ('07', '07 - Julio'), ('08', '08 - Agosto'), ('09', '09 - Septiembre'), ('10', '10 - Octubre'), ('11', '11 - Noviembre'), ('12', '12 - Diciembre')], help_text='Meses del período de la información global', max_length=2, null=True, verbose_name='Meses')),
                ('año_informacion_global', models.IntegerField(blank=True, help_text='Año del período de la información global', null=True, verbose_name='Año')),
                ('xml_original', models.TextField(blank=True, help_text='XML original antes del timbrado', null=True, verbose_name='XML Original')),
                ('xml_timbrado', models.TextField(blank=True, help_text='XML timbrado por el PAC', null=True, verbose_name='XML Timbrado')),
                ('fecha_cancelacion', models.DateTimeField(blank=True, help_text='Fecha y hora de cancelación', null=True, verbose_name='Fecha de Cancelación')),
                ('motivo_cancelacion', models.CharField(blank=True, help_text='Motivo de la cancelación', max_length=500, null=True, verbose_name='Motivo de Cancelación')),
                ('acuse_cancelacion', models.TextField(blank=True, help_text='Acuse de cancelación del SAT', null=True, verbose_name='Acuse de Cancelación')),
                ('errores_validacion', models.TextField(blank=True, help_text='Errores encontrados en la validación', null=True, verbose_name='Errores de Validación')),
                ('intentos_timbrado', models.PositiveIntegerField(default=0, help_text='Número de intentos de timbrado', verbose_name='Intentos de Timbrado')),
                ('ultimo_intento', models.DateTimeField(blank=True, help_text='Fecha del último intento de timbrado', null=True, verbose_name='Último Intento')),
                ('emisor', models.ForeignKey(help_text='Emisor de la factura', on_delete=django.db.models.deletion.PROTECT, to='core.emisor', verbose_name='Emisor')),
                ('receptor', models.ForeignKey(help_text='Cliente receptor de la factura', on_delete=django.db.models.deletion.PROTECT, to='core.cliente', verbose_name='Receptor')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='facturas_creadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='facturas_modificadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Modificación')),
            ],
            options={
                'verbose_name': 'Factura CFDI 4.0',
                'verbose_name_plural': 'Facturas CFDI 4.0',
                'db_table': 'facturas',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='LoteOrigen',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('nombre', models.CharField(help_text='Nombre del lote de origen', max_length=200, verbose_name='Nombre')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales sobre el lote de origen', null=True, verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el lote de origen está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lotes_origen_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lotes_origen_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Lote de Origen',
                'verbose_name_plural': 'Lotes de Origen',
                'db_table': 'lotes_origen',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='PagoFactura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_pago', models.DateTimeField(default=django.utils.timezone.now, help_text='Fecha y hora del pago', verbose_name='Fecha de Pago')),
                ('monto_pago', models.DecimalField(decimal_places=2, help_text='Monto pagado en esta transacción', max_digits=15, verbose_name='Monto del Pago')),
                ('tipo_pago', models.CharField(choices=[('PARCIAL', 'Pago Parcial'), ('COMPLETO', 'Pago Completo'), ('ABONO', 'Abono a Cuenta')], default='PARCIAL', help_text='Tipo de pago realizado', max_length=10, verbose_name='Tipo de Pago')),
                ('referencia_pago', models.CharField(blank=True, help_text='Referencia bancaria, transferencia, etc.', max_length=100, null=True, verbose_name='Referencia de Pago')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales del pago', null=True, verbose_name='Observaciones')),
                ('num_parcialidad', models.PositiveIntegerField(default=1, help_text='Número de parcialidad del pago', verbose_name='Número de Parcialidad')),
                ('forma_pago', models.CharField(default='03', help_text='Código de forma de pago según catálogo SAT', max_length=2, verbose_name='Forma de Pago')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Modificación')),
                ('uuid', models.CharField(blank=True, help_text='UUID del complemento de pago timbrado', max_length=36, null=True, verbose_name='UUID')),
                ('xml_timbrado', models.TextField(blank=True, help_text='XML del complemento de pago timbrado en Base64', null=True, verbose_name='XML Timbrado')),
                ('sello', models.TextField(blank=True, help_text='Sello del complemento de pago', null=True, verbose_name='Sello CFD')),
                ('sello_sat', models.TextField(blank=True, help_text='Sello del timbre fiscal digital', null=True, verbose_name='Sello SAT')),
                ('no_certificado_sat', models.CharField(blank=True, help_text='Número de certificado del SAT', max_length=20, null=True, verbose_name='No. Certificado SAT')),
                ('fecha_timbrado', models.CharField(blank=True, help_text='Fecha de timbrado del complemento de pago', max_length=50, null=True, verbose_name='Fecha Timbrado')),
                ('codigo_qr', models.TextField(blank=True, help_text='Código QR del complemento de pago en Base64', null=True, verbose_name='Código QR')),
                ('cadena_original_sat', models.TextField(blank=True, help_text='Cadena original del complemento SAT (SelloCFD del timbre fiscal)', null=True, verbose_name='Cadena Original complemento SAT')),
                ('factura', models.ForeignKey(help_text='Factura a la que corresponde el pago', on_delete=django.db.models.deletion.CASCADE, related_name='pagos', to='core.factura', verbose_name='Factura')),
                ('usuario_registro', models.ForeignKey(help_text='Usuario que registró el pago', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Usuario que Registró')),
            ],
            options={
                'verbose_name': 'Pago de Factura',
                'verbose_name_plural': 'Pagos de Facturas',
                'db_table': 'pagos_factura',
                'ordering': ['-fecha_pago'],
            },
        ),
        migrations.CreateModel(
            name='Presupuesto',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('ciclo', models.CharField(help_text='Ciclo de producción para el cual se define el presupuesto', max_length=100, verbose_name='Ciclo')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales sobre el presupuesto', null=True, verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el presupuesto está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Última Modificación')),
                ('centro_costo', models.ForeignKey(help_text='Centro de costo al que pertenece el presupuesto', on_delete=django.db.models.deletion.PROTECT, to='core.centrocosto', verbose_name='Centro de Costo')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='presupuestos_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='presupuestos_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Última Modificación')),
            ],
            options={
                'verbose_name': 'Presupuesto',
                'verbose_name_plural': 'Presupuestos',
                'db_table': 'presupuestos',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='Gasto',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('ciclo', models.CharField(help_text='Ciclo al que pertenece el gasto', max_length=10, verbose_name='Ciclo')),
                ('fecha_gasto', models.DateField(help_text='Fecha en que se realizó el gasto', verbose_name='Fecha del Gasto')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales del gasto', null=True, verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el gasto está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='gastos_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gastos_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Última Modificación')),
                ('presupuesto', models.ForeignKey(help_text='Presupuesto al que pertenece este gasto', on_delete=django.db.models.deletion.PROTECT, related_name='gastos', to='core.presupuesto', verbose_name='Presupuesto')),
            ],
            options={
                'verbose_name': 'Gasto',
                'verbose_name_plural': 'Gastos',
                'db_table': 'gastos',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='PresupuestoDetalle',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('importe', models.DecimalField(decimal_places=2, help_text='Importe presupuestado para esta clasificación de gasto', max_digits=12, verbose_name='Importe')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el detalle está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Última Modificación')),
                ('clasificacion_gasto', models.ForeignKey(help_text='Clasificación de gasto presupuestada', on_delete=django.db.models.deletion.PROTECT, to='core.clasificaciongasto', verbose_name='Clasificación de Gasto')),
                ('presupuesto', models.ForeignKey(help_text='Presupuesto al que pertenece este detalle', on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='core.presupuesto', verbose_name='Presupuesto')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='presupuesto_detalles_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='presupuesto_detalles_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Última Modificación')),
            ],
            options={
                'verbose_name': 'Detalle de Presupuesto',
                'verbose_name_plural': 'Detalles de Presupuesto',
                'db_table': 'presupuesto_detalles',
                'ordering': ['fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='PresupuestoGasto',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('ciclo', models.CharField(help_text='Ciclo de producción para el cual se define el presupuesto', max_length=100, verbose_name='Ciclo')),
                ('importe', models.DecimalField(decimal_places=2, help_text='Importe presupuestado para esta clasificación de gasto', max_digits=12, verbose_name='Importe')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales sobre el presupuesto', null=True, verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el presupuesto está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Última Modificación')),
                ('centro_costo', models.ForeignKey(help_text='Centro de costo al que pertenece el presupuesto', on_delete=django.db.models.deletion.PROTECT, to='core.centrocosto', verbose_name='Centro de Costo')),
                ('clasificacion_gasto', models.ForeignKey(help_text='Clasificación de gasto presupuestada', on_delete=django.db.models.deletion.PROTECT, to='core.clasificaciongasto', verbose_name='Clasificación de Gasto')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='presupuestos_gasto_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='presupuestos_gasto_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Última Modificación')),
            ],
            options={
                'verbose_name': 'Presupuesto de Gasto (DEPRECATED)',
                'verbose_name_plural': 'Presupuestos de Gastos (DEPRECATED)',
                'db_table': 'presupuestos_gasto',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='ProductoServicio',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('sku', models.CharField(help_text='Clave alfanumérica única del producto o servicio', max_length=50, unique=True, verbose_name='SKU')),
                ('descripcion', models.CharField(help_text='Descripción del producto o servicio', max_length=200, verbose_name='Descripción')),
                ('producto_servicio', models.BooleanField(default=True, help_text='True = Producto, False = Servicio', verbose_name='Tipo')),
                ('unidad_medida', models.CharField(help_text='Unidad de medida del producto o servicio', max_length=50, verbose_name='Unidad de Medida')),
                ('clave_sat', models.CharField(help_text='Clave del catálogo ClaveProdServ del SAT', max_length=20, verbose_name='Clave SAT')),
                ('impuesto', models.CharField(choices=[('IVA_16', 'IVA Tasa 16%'), ('IVA_0', 'IVA Tasa cero'), ('IVA_EXENTO', 'IVA exento')], help_text='Tipo de impuesto aplicable', max_length=20, verbose_name='Impuesto')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el producto o servicio está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='productos_servicios_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='productos_servicios_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Producto o Servicio',
                'verbose_name_plural': 'Productos y Servicios',
                'db_table': 'productos_servicios',
                'ordering': ['descripcion'],
            },
        ),
        migrations.CreateModel(
            name='FacturaDetalle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no_identificacion', models.CharField(blank=True, help_text='Número de identificación del producto (opcional)', max_length=50, null=True, verbose_name='NoIdentificacion')),
                ('concepto', models.CharField(help_text='Descripción del concepto (requerido)', max_length=1000, verbose_name='Descripcion')),
                ('cantidad', models.DecimalField(decimal_places=6, help_text='Cantidad del producto (requerido)', max_digits=15, verbose_name='Cantidad')),
                ('precio', models.DecimalField(decimal_places=6, help_text='Valor unitario del producto (requerido)', max_digits=15, verbose_name='ValorUnitario')),
                ('clave_prod_serv', models.CharField(help_text='Clave del producto o servicio (requerido)', max_length=20, verbose_name='ClaveProdServ')),
                ('clave_unidad', models.CharField(default='H87', help_text='Clave de la unidad de medida (requerido)', max_length=3, verbose_name='ClaveUnidad')),
                ('unidad', models.CharField(default='Pieza', help_text='Unidad de medida (requerido)', max_length=20, verbose_name='Unidad')),
                ('objeto_impuesto', models.CharField(choices=[('01', '01 - No objeto del impuesto'), ('02', '02 - Sí objeto del impuesto'), ('03', '03 - Sí objeto del impuesto y no obligado al desglose')], default='02', help_text='Objeto del impuesto (requerido)', max_length=2, verbose_name='ObjetoImp')),
                ('importe', models.DecimalField(decimal_places=2, help_text='Importe del concepto (cantidad * precio) (requerido)', max_digits=15, verbose_name='Importe')),
                ('impuesto_concepto', models.DecimalField(decimal_places=4, default=0.0, help_text='Impuesto del concepto', max_digits=15, verbose_name='Impuesto')),
                ('descuento', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Descuento aplicado al concepto (opcional)', max_digits=15, null=True, verbose_name='Descuento')),
                ('factura', models.ForeignKey(help_text='Factura a la que pertenece el detalle', on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='core.factura', verbose_name='Factura')),
                ('producto_servicio', models.ForeignKey(help_text='Producto o servicio facturado', on_delete=django.db.models.deletion.PROTECT, to='core.productoservicio', verbose_name='Producto/Servicio')),
            ],
            options={
                'verbose_name': 'Concepto CFDI 4.0',
                'verbose_name_plural': 'Conceptos CFDI 4.0',
                'db_table': 'factura_detalles',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Proveedor',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('nombre', models.CharField(help_text='Nombre completo o razón social del proveedor', max_length=200, verbose_name='Nombre')),
                ('rfc', models.CharField(help_text='Registro Federal de Contribuyentes (12 o 13 caracteres)', max_length=13, unique=True, validators=[core.models.validar_rfc], verbose_name='RFC')),
                ('domicilio', models.TextField(help_text='Dirección completa del proveedor', verbose_name='Domicilio')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el proveedor está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='proveedores_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='proveedores_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Proveedor',
                'verbose_name_plural': 'Proveedores',
                'db_table': 'proveedores',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='GastoDetalle',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('factura', models.CharField(help_text='Número de factura del proveedor', max_length=100, verbose_name='Factura')),
                ('concepto', models.CharField(help_text='Concepto o descripción del gasto', max_length=255, verbose_name='Concepto')),
                ('forma_pago', models.CharField(blank=True, choices=[('01', '01 - Efectivo'), ('02', '02 - Cheque nominativo'), ('03', '03 - Transferencia electrónica de fondos'), ('04', '04 - Tarjeta de crédito'), ('05', '05 - Monedero electrónico'), ('06', '06 - Dinero electrónico'), ('08', '08 - Vales de despensa'), ('12', '12 - Dación en pago'), ('13', '13 - Pago por subrogación'), ('14', '14 - Pago por consignación'), ('15', '15 - Condonación'), ('17', '17 - Compensación'), ('23', '23 - Novación'), ('24', '24 - Confusión'), ('25', '25 - Remisión de deuda'), ('26', '26 - Prescripción o caducidad'), ('27', '27 - A satisfacción del acreedor'), ('28', '28 - Tarjeta de débito'), ('29', '29 - Tarjeta de servicios'), ('30', '30 - Aplicación de anticipos'), ('31', '31 - Intermediario pagos'), ('99', '99 - Por definir')], help_text='Forma de pago según catálogo SAT', max_length=2, null=True, verbose_name='Forma de Pago')),
                ('importe', models.DecimalField(decimal_places=2, help_text='Importe del gasto', max_digits=12, verbose_name='Importe')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el detalle está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Modificación')),
                ('autorizo', models.ForeignKey(blank=True, help_text='Persona que autorizó el gasto', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.autorizogasto', verbose_name='Autorizó')),
                ('clasificacion_gasto', models.ForeignKey(help_text='Clasificación de gasto según el presupuesto', on_delete=django.db.models.deletion.PROTECT, to='core.clasificaciongasto', verbose_name='Clasificación de Gasto')),
                ('gasto', models.ForeignKey(help_text='Gasto al que pertenece este detalle', on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='core.gasto', verbose_name='Gasto')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='gasto_detalles_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gasto_detalles_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Última Modificación')),
                ('proveedor', models.ForeignKey(help_text='Proveedor que emitió la factura', on_delete=django.db.models.deletion.PROTECT, to='core.proveedor', verbose_name='Proveedor')),
            ],
            options={
                'verbose_name': 'Detalle de Gasto',
                'verbose_name_plural': 'Detalles de Gastos',
                'db_table': 'gasto_detalles',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='Remision',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('ciclo', models.CharField(help_text='Ciclo de producción actual', max_length=100, verbose_name='Ciclo')),
                ('folio', models.PositiveIntegerField(help_text='Número de folio de la remisión', verbose_name='Folio')),
                ('fecha', models.DateField(help_text='Fecha de la remisión', verbose_name='Fecha')),
                ('costo_flete', models.DecimalField(decimal_places=2, default=0.0, help_text='Costo del flete de transporte', max_digits=10, verbose_name='Costo de Flete')),
                ('peso_bruto_embarque', models.DecimalField(decimal_places=2, default=0.0, help_text='Peso total bruto de la remisión en kilogramos', max_digits=15, verbose_name='Peso Bruto de Embarque')),
                ('merma_arps_global', models.PositiveIntegerField(default=0, help_text='Número total de arps con merma en la remisión', verbose_name='Merma/Arps Global')),
                ('peso_bruto_liquidado', models.DecimalField(decimal_places=2, default=0.0, help_text='Peso bruto liquidado en kilogramos', max_digits=15, verbose_name='Peso Bruto Liquidado')),
                ('merma_arps_liquidados', models.PositiveIntegerField(default=0, help_text='Número de arps con merma liquidados', verbose_name='Merma/Arps Liquidados')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales sobre la remisión', null=True, verbose_name='Observaciones')),
                ('fecha_pago', models.DateField(blank=True, help_text='Fecha en que se realizó el pago', null=True, verbose_name='Fecha de Pago')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('cancelada', models.BooleanField(default=False, verbose_name='Remisión cancelada')),
                ('motivo_cancelacion', models.TextField(blank=True, null=True, verbose_name='Motivo de cancelación')),
                ('folio_sustituto', models.CharField(blank=True, max_length=50, null=True, verbose_name='Folio que sustituye')),
                ('fecha_cancelacion', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de cancelación')),
                ('facturado', models.BooleanField(default=False, help_text='Indica si la remisión ha sido facturada', verbose_name='Facturado')),
                ('pagado', models.BooleanField(default=False, help_text='Indica si la remisión ha sido pagada', verbose_name='Pagado')),
                ('cliente', models.ForeignKey(help_text='Cliente de la remisión', on_delete=django.db.models.deletion.PROTECT, to='core.cliente', verbose_name='Cliente')),
                ('lote_origen', models.ForeignKey(help_text='Lote de origen de la remisión', on_delete=django.db.models.deletion.PROTECT, to='core.loteorigen', verbose_name='Lote - Origen')),
                ('usuario_cancelacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='remisiones_canceladas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que canceló la remisión')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='remisiones_creadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='remisiones_modificadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Remisión',
                'verbose_name_plural': 'Remisiones',
                'db_table': 'remisiones',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='PagoRemision',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('metodo_pago', models.CharField(choices=[('efectivo', 'Efectivo'), ('transferencia', 'Transferencia'), ('cheque', 'Cheque')], max_length=20, verbose_name='Método de Pago')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Monto')),
                ('fecha_pago', models.DateField(verbose_name='Fecha de Pago')),
                ('referencia', models.CharField(blank=True, max_length=100, null=True, verbose_name='Referencia/Comprobante')),
                ('observaciones', models.TextField(blank=True, null=True, verbose_name='Observaciones')),
                ('activo', models.BooleanField(default=True, verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de Última Modificación')),
                ('cuenta_bancaria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.cuentabancaria', verbose_name='Cuenta Bancaria')),
                ('usuario_creacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pagos_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Creación')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pagos_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario de Última Modificación')),
                ('remision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagos', to='core.remision', verbose_name='Remisión')),
            ],
            options={
                'verbose_name': 'Pago de Remisión',
                'verbose_name_plural': 'Pagos de Remisiones',
                'ordering': ['-fecha_pago', '-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='RemisionDetalle',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('calidad', models.CharField(choices=[('1ras/2das', '1ras/2das'), ('3as', '3as'), ('4as', '4as'), ('Mixtas', 'Mixtas')], help_text='Calidad del producto', max_length=20, verbose_name='Calidad')),
                ('no_arps', models.PositiveIntegerField(help_text='Número de arps', verbose_name='No Arps')),
                ('kgs_enviados', models.DecimalField(decimal_places=2, help_text='Kilogramos enviados', max_digits=15, verbose_name='Kgs Enviados')),
                ('merma_arps', models.PositiveIntegerField(help_text='Merma por arps', verbose_name='Merma/Arps')),
                ('peso_promedio', models.DecimalField(decimal_places=2, default=0.0, help_text='Peso promedio calculado automáticamente', max_digits=15, verbose_name='Peso Promedio')),
                ('no_arps_liquidados', models.PositiveIntegerField(default=0, help_text='Número de arps liquidados', verbose_name='No Arps Liquidados')),
                ('kgs_merma_liquidados', models.DecimalField(decimal_places=2, default=0.0, help_text='Kilogramos de merma liquidados', max_digits=15, verbose_name='Kgs Merma Liquidados')),
                ('peso_promedio_liquidado', models.DecimalField(decimal_places=2, default=0.0, help_text='Peso promedio liquidado calculado automáticamente', max_digits=15, verbose_name='Peso Promedio Liquidado')),
                ('kgs_liquidados', models.DecimalField(decimal_places=2, default=0.0, help_text='Kilogramos liquidados', max_digits=15, verbose_name='Kgs Liquidados')),
                ('kgs_merma', models.DecimalField(decimal_places=2, default=0.0, help_text='Kilogramos de merma', max_digits=15, verbose_name='Kgs Merma')),
                ('precio', models.DecimalField(decimal_places=2, default=0.0, help_text='Precio por kilogramo', max_digits=15, verbose_name='Precio')),
                ('importe_liquidado', models.DecimalField(decimal_places=2, default=0.0, help_text='Importe total liquidado', max_digits=18, verbose_name='Importe Liquidado')),
                ('dif_peso_promedio', models.DecimalField(decimal_places=2, default=0.0, help_text='Diferencia entre Peso Promedio y Peso Promedio Liquidado', max_digits=15, verbose_name='Dif Peso Promedio')),
                ('dif_no_arps', models.IntegerField(default=0, help_text='Diferencia entre No Arps y No Arps Liquidados', verbose_name='Dif No Arps')),
                ('dif_kgs_merma', models.DecimalField(decimal_places=2, default=0.0, help_text='Diferencia entre Kgs Merma y Kgs Merma Liquidados', max_digits=15, verbose_name='Dif Kgs Merma')),
                ('dif_kgs_liquidados', models.DecimalField(decimal_places=2, default=0.0, help_text='Diferencia entre Kgs Enviados y Kgs Liquidados', max_digits=15, verbose_name='Dif Kgs Liquidados')),
                ('dif_precio', models.DecimalField(decimal_places=2, default=0.0, help_text='Diferencia entre Precio Envío y Precio por Kg', max_digits=15, verbose_name='Dif Precio')),
                ('dif_importes', models.DecimalField(decimal_places=2, default=0.0, help_text='Diferencia entre Importe Neto Envío e Importe Liquidado', max_digits=18, verbose_name='Dif Importes')),
                ('precio_envio', models.DecimalField(decimal_places=2, default=0.0, help_text='Precio por kilogramo para envío', max_digits=15, verbose_name='Precio Envío')),
                ('importe_envio', models.DecimalField(decimal_places=2, default=0.0, help_text='Importe total de envío (Precio Envío × Kgs Enviados)', max_digits=18, verbose_name='Importe Envío')),
                ('kgs_neto_envio', models.DecimalField(decimal_places=2, default=0.0, help_text='Kilogramos netos de envío (Kgs Enviados - Kgs Merma)', max_digits=15, verbose_name='Kgs Neto Envío')),
                ('importe_neto_envio', models.DecimalField(decimal_places=2, default=0.0, help_text='Importe neto de envío (Precio Envío × Kgs Neto Envío)', max_digits=18, verbose_name='Importe Neto Envío')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('fecha_liquidacion', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de liquidación')),
                ('cultivo', models.ForeignKey(help_text='Cultivo del detalle', on_delete=django.db.models.deletion.PROTECT, to='core.cultivo', verbose_name='Cultivo')),
                ('remision', models.ForeignKey(help_text='Remisión a la que pertenece este detalle', on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='core.remision', verbose_name='Remisión')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='remisiones_detalles_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_liquidacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='remisiones_detalles_liquidadas', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que liquidó el detalle')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='remisiones_detalles_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Detalle de Remisión',
                'verbose_name_plural': 'Detalles de Remisiones',
                'db_table': 'remisiones_detalles',
                'ordering': ['codigo'],
            },
        ),
        migrations.CreateModel(
            name='Transportista',
            fields=[
                ('codigo', models.AutoField(primary_key=True, serialize=False, verbose_name='Código')),
                ('nombre_completo', models.CharField(help_text='Nombre completo del transportista', max_length=200, verbose_name='Nombre Completo')),
                ('licencia', models.CharField(help_text='Número de licencia de conducir', max_length=50, verbose_name='Licencia')),
                ('domicilio', models.TextField(help_text='Dirección completa del transportista', verbose_name='Domicilio')),
                ('telefono', models.CharField(help_text='Número de teléfono del transportista', max_length=15, validators=[django.core.validators.RegexValidator(message='El teléfono solo puede contener números, espacios, guiones, paréntesis y el signo más', regex='^[\\d\\s\\-\\+\\(\\)]+$')], verbose_name='Teléfono')),
                ('tipo_camion', models.CharField(help_text='Tipo o modelo del camión', max_length=100, verbose_name='Tipo de Camión')),
                ('placas_unidad', models.CharField(help_text='Placas del camión principal', max_length=20, verbose_name='Placas de Unidad')),
                ('placas_remolque', models.CharField(blank=True, help_text='Placas del remolque (opcional)', max_length=20, null=True, verbose_name='Placas de Remolque')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el transportista está activo en el sistema', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_modificacion', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('usuario_creacion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transportistas_creados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que creó el registro')),
                ('usuario_modificacion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transportistas_modificados', to=settings.AUTH_USER_MODEL, verbose_name='Usuario que modificó el registro')),
            ],
            options={
                'verbose_name': 'Transportista',
                'verbose_name_plural': 'Transportistas',
                'db_table': 'transportistas',
                'ordering': ['nombre_completo'],
            },
        ),
        migrations.AddField(
            model_name='remision',
            name='transportista',
            field=models.ForeignKey(help_text='Transportista de la remisión', on_delete=django.db.models.deletion.PROTECT, to='core.transportista', verbose_name='Transportista'),
        ),
        migrations.AddIndex(
            model_name='centrocosto',
            index=models.Index(fields=['descripcion'], name='centros_cos_descrip_3af6a8_idx'),
        ),
        migrations.AddIndex(
            model_name='centrocosto',
            index=models.Index(fields=['activo'], name='centros_cos_activo_4ca146_idx'),
        ),
        migrations.AddIndex(
            model_name='clasificaciongasto',
            index=models.Index(fields=['descripcion'], name='clasificaci_descrip_e92818_idx'),
        ),
        migrations.AddIndex(
            model_name='clasificaciongasto',
            index=models.Index(fields=['activo'], name='clasificaci_activo_4e8b21_idx'),
        ),
        migrations.AddIndex(
            model_name='cuentabancaria',
            index=models.Index(fields=['nombre_banco'], name='cuentas_ban_nombre__304a88_idx'),
        ),
        migrations.AddIndex(
            model_name='cuentabancaria',
            index=models.Index(fields=['numero_cuenta'], name='cuentas_ban_numero__a7969b_idx'),
        ),
        migrations.AddIndex(
            model_name='cuentabancaria',
            index=models.Index(fields=['nombre_corto'], name='cuentas_ban_nombre__013077_idx'),
        ),
        migrations.AddIndex(
            model_name='cuentabancaria',
            index=models.Index(fields=['activo'], name='cuentas_ban_activo_baed7f_idx'),
        ),
        migrations.AddIndex(
            model_name='emisor',
            index=models.Index(fields=['rfc'], name='emisores_rfc_8659b0_idx'),
        ),
        migrations.AddIndex(
            model_name='emisor',
            index=models.Index(fields=['razon_social'], name='emisores_razon_s_d5d49d_idx'),
        ),
        migrations.AddIndex(
            model_name='emisor',
            index=models.Index(fields=['activo'], name='emisores_activo_209d53_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['serie', 'folio'], name='facturas_serie_583a53_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['fecha_emision'], name='facturas_fecha_e_2669a7_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['emisor'], name='facturas_emisor__a4b343_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['receptor'], name='facturas_recepto_d098e8_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['uuid'], name='facturas_uuid_a5ed0b_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['estado_timbrado'], name='facturas_estado__7cb2cc_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['fecha_timbrado'], name='facturas_fecha_t_b595d3_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['cancelada'], name='facturas_cancela_f63b14_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['tipo_comprobante'], name='facturas_tipo_co_fe100c_idx'),
        ),
        migrations.AddIndex(
            model_name='factura',
            index=models.Index(fields=['exportacion'], name='facturas_exporta_a41794_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='factura',
            unique_together={('serie', 'folio')},
        ),
        migrations.AddIndex(
            model_name='loteorigen',
            index=models.Index(fields=['nombre'], name='lotes_orige_nombre_8131b3_idx'),
        ),
        migrations.AddIndex(
            model_name='loteorigen',
            index=models.Index(fields=['activo'], name='lotes_orige_activo_ad30f3_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuesto',
            index=models.Index(fields=['centro_costo', 'ciclo'], name='presupuesto_centro__b3ca24_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuesto',
            index=models.Index(fields=['ciclo'], name='presupuesto_ciclo_178382_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuesto',
            index=models.Index(fields=['activo'], name='presupuesto_activo_888055_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='presupuesto',
            unique_together={('centro_costo', 'ciclo')},
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['presupuesto', 'ciclo'], name='gastos_presupu_5346b6_idx'),
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['fecha_gasto'], name='gastos_fecha_g_cb5346_idx'),
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['activo'], name='gastos_activo_42870b_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuestodetalle',
            index=models.Index(fields=['presupuesto'], name='presupuesto_presupu_1b9751_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuestodetalle',
            index=models.Index(fields=['clasificacion_gasto'], name='presupuesto_clasifi_f37f99_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuestodetalle',
            index=models.Index(fields=['activo'], name='presupuesto_activo_4a5ee0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='presupuestodetalle',
            unique_together={('presupuesto', 'clasificacion_gasto')},
        ),
        migrations.AddIndex(
            model_name='presupuestogasto',
            index=models.Index(fields=['centro_costo', 'ciclo'], name='presupuesto_centro__80c89d_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuestogasto',
            index=models.Index(fields=['ciclo'], name='presupuesto_ciclo_1f3f8d_idx'),
        ),
        migrations.AddIndex(
            model_name='presupuestogasto',
            index=models.Index(fields=['activo'], name='presupuesto_activo_5a4c84_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='presupuestogasto',
            unique_together={('centro_costo', 'clasificacion_gasto', 'ciclo')},
        ),
        migrations.AddIndex(
            model_name='productoservicio',
            index=models.Index(fields=['sku'], name='productos_s_sku_ddc93a_idx'),
        ),
        migrations.AddIndex(
            model_name='productoservicio',
            index=models.Index(fields=['descripcion'], name='productos_s_descrip_3d9234_idx'),
        ),
        migrations.AddIndex(
            model_name='productoservicio',
            index=models.Index(fields=['producto_servicio'], name='productos_s_product_fa5ceb_idx'),
        ),
        migrations.AddIndex(
            model_name='productoservicio',
            index=models.Index(fields=['clave_sat'], name='productos_s_clave_s_83ebe6_idx'),
        ),
        migrations.AddIndex(
            model_name='productoservicio',
            index=models.Index(fields=['activo'], name='productos_s_activo_d0202b_idx'),
        ),
        migrations.AddIndex(
            model_name='facturadetalle',
            index=models.Index(fields=['factura'], name='factura_det_factura_81d21b_idx'),
        ),
        migrations.AddIndex(
            model_name='facturadetalle',
            index=models.Index(fields=['clave_prod_serv'], name='factura_det_clave_p_b2a196_idx'),
        ),
        migrations.AddIndex(
            model_name='facturadetalle',
            index=models.Index(fields=['objeto_impuesto'], name='factura_det_objeto__f48559_idx'),
        ),
        migrations.AddIndex(
            model_name='proveedor',
            index=models.Index(fields=['rfc'], name='proveedores_rfc_669982_idx'),
        ),
        migrations.AddIndex(
            model_name='proveedor',
            index=models.Index(fields=['nombre'], name='proveedores_nombre_4e7949_idx'),
        ),
        migrations.AddIndex(
            model_name='proveedor',
            index=models.Index(fields=['activo'], name='proveedores_activo_068092_idx'),
        ),
        migrations.AddIndex(
            model_name='gastodetalle',
            index=models.Index(fields=['gasto'], name='gasto_detal_gasto_i_0fa69d_idx'),
        ),
        migrations.AddIndex(
            model_name='gastodetalle',
            index=models.Index(fields=['proveedor'], name='gasto_detal_proveed_4e6c40_idx'),
        ),
        migrations.AddIndex(
            model_name='gastodetalle',
            index=models.Index(fields=['factura'], name='gasto_detal_factura_91c7fd_idx'),
        ),
        migrations.AddIndex(
            model_name='gastodetalle',
            index=models.Index(fields=['activo'], name='gasto_detal_activo_c380e1_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['rfc'], name='clientes_rfc_48375a_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['razon_social'], name='clientes_razon_s_6d1478_idx'),
        ),
        migrations.AddIndex(
            model_name='cliente',
            index=models.Index(fields=['activo'], name='clientes_activo_1f6d14_idx'),
        ),
        migrations.AddIndex(
            model_name='remisiondetalle',
            index=models.Index(fields=['remision'], name='remisiones__remisio_a66c5b_idx'),
        ),
        migrations.AddIndex(
            model_name='remisiondetalle',
            index=models.Index(fields=['cultivo'], name='remisiones__cultivo_637993_idx'),
        ),
        migrations.AddIndex(
            model_name='remisiondetalle',
            index=models.Index(fields=['calidad'], name='remisiones__calidad_f9c377_idx'),
        ),
        migrations.AddIndex(
            model_name='transportista',
            index=models.Index(fields=['licencia'], name='transportis_licenci_0fe8ad_idx'),
        ),
        migrations.AddIndex(
            model_name='transportista',
            index=models.Index(fields=['nombre_completo'], name='transportis_nombre__130c80_idx'),
        ),
        migrations.AddIndex(
            model_name='transportista',
            index=models.Index(fields=['placas_unidad'], name='transportis_placas__61e3be_idx'),
        ),
        migrations.AddIndex(
            model_name='transportista',
            index=models.Index(fields=['activo'], name='transportis_activo_f2c8fb_idx'),
        ),
        migrations.AddIndex(
            model_name='remision',
            index=models.Index(fields=['ciclo', 'folio'], name='remisiones_ciclo_d6b184_idx'),
        ),
        migrations.AddIndex(
            model_name='remision',
            index=models.Index(fields=['fecha'], name='remisiones_fecha_697658_idx'),
        ),
        migrations.AddIndex(
            model_name='remision',
            index=models.Index(fields=['cliente'], name='remisiones_cliente_eb1548_idx'),
        ),
        migrations.AddIndex(
            model_name='remision',
            index=models.Index(fields=['lote_origen'], name='remisiones_lote_or_a06442_idx'),
        ),
        migrations.AddIndex(
            model_name='remision',
            index=models.Index(fields=['transportista'], name='remisiones_transpo_0f0fb8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='remision',
            unique_together={('ciclo', 'folio')},
        ),
    ]
